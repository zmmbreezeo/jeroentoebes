# Copyright (c) 2013-2019 Huawei Technologies Co., Ltd. All rights reserved.
# Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//build/lite/config/test.gni")
import("../config.gni")

common_include_dirs = [
  "//third_party/googletest/googletest/include",
  "../common/include",
  "./",
]

sources_entry = [
  "../common/osTest.cpp",
  "signal_test.cpp",
]

source_set("sources_smoke") {
  sources = [
    "smoke/It_ipc_fdclr_001.cpp",
    "smoke/It_ipc_fdisset_001.cpp",
    "smoke/It_ipc_fdset_001.cpp",
    "smoke/It_ipc_fdzero_001.cpp",
    "smoke/It_ipc_mkfifo_002.cpp",
    "smoke/It_ipc_mkfifo_003.cpp",
    "smoke/It_ipc_pipe_002.cpp",
    "smoke/It_ipc_pipe_003.cpp",
    "smoke/It_ipc_pipe_004.cpp",
    "smoke/It_ipc_pipe_005.cpp",
    "smoke/It_ipc_sigaction_001.cpp",
    "smoke/It_ipc_sigpause_001.cpp",
    "smoke/It_ipc_sigprocmask_001.cpp",
    "smoke/mkfifo_test_001.cpp",
    "smoke/mkfifo_test_002.cpp",
    "smoke/pipe_test_001.cpp",
    "smoke/pipe_test_002.cpp",
    "smoke/pipe_test_003.cpp",
    "smoke/pipe_test_004.cpp",
    "smoke/pipe_test_005.cpp",
    "smoke/pipe_test_006.cpp",
    "smoke/signal_test_001.cpp",
    "smoke/signal_test_002.cpp",
    "smoke/signal_test_003.cpp",
    "smoke/signal_test_004.cpp",
    "smoke/signal_test_005.cpp",
    "smoke/signal_test_006.cpp",
    "smoke/signal_test_007.cpp",
    "smoke/signal_test_008.cpp",
    "smoke/signal_test_009.cpp",
    "smoke/signal_test_010.cpp",
    "smoke/signal_test_011.cpp",
    "smoke/signal_test_012.cpp",
    "smoke/signal_test_013.cpp",
    "smoke/signal_test_014.cpp",
    "smoke/signal_test_015.cpp",
    "smoke/signal_test_016.cpp",
    "smoke/signal_test_017.cpp",
    "smoke/signal_test_018.cpp",
    "smoke/signal_test_019.cpp",
    "smoke/signal_test_020.cpp",
    "smoke/signal_test_021.cpp",
    "smoke/signal_test_022.cpp",
    "smoke/signal_test_023.cpp",
    "smoke/signal_test_024.cpp",
    "smoke/signal_test_025.cpp",
    "smoke/signal_test_026.cpp",
    "smoke/signal_test_028.cpp",
    "smoke/signal_test_029.cpp",
    "smoke/signal_test_030.cpp",
    "smoke/signal_test_031.cpp",
    "smoke/signal_test_032.cpp",
    "smoke/signal_test_033.cpp",
    "smoke/signal_test_035.cpp",
    "smoke/signal_test_036.cpp",
    "smoke/signal_test_037.cpp",
    "smoke/signal_test_038.cpp",
    "smoke/signal_test_039.cpp",
    "smoke/signal_test_040.cpp",
    "smoke/signal_test_041.cpp",
    "smoke/signal_test_042.cpp",
    "smoke/sigset_test_001.cpp",
    "smoke/sigset_test_002.cpp",
  ]
  include_dirs = common_include_dirs
  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
}

source_set("sources_other") {
  sources = [
  ]
  include_dirs = common_include_dirs
  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
}

if (LOSCFG_USER_TEST_FOR_ALL == true) {
  unittest("liteos_a_signal_unittest") {
    output_extension = "bin"
    output_dir = "$root_out_dir/test/unittest/kernel"
    include_dirs = common_include_dirs
    sources = sources_entry
    configs = [ "..:public_config_full" ]
    deps = []
    deps += [ ":sources_smoke" ]
    deps += [ ":sources_other" ]
  }
}

if (LOSCFG_USER_TEST_FOR_DOOR == true) {
  unittest("liteos_a_signal_unittest_door") {
    output_extension = "bin"
    output_dir = "$root_out_dir/test/unittest/kernel"
    include_dirs = common_include_dirs
    sources = sources_entry
    configs = [ "..:public_config_smk" ]
    deps = []
    deps += [ ":sources_smoke" ]
  }
}