# Copyright (c) 2013-2019 Huawei Technologies Co., Ltd. All rights reserved.
# Copyright (c) 2020-2021 Huawei Device Co., Ltd. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice, this list
#    of conditions and the following disclaimer in the documentation and/or other materials
#    provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors may be used
#    to endorse or promote products derived from this software without specific prior written
#    permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import("//build/lite/config/test.gni")
import("../../config.gni")

common_include_dirs = [
  "//third_party/googletest/googletest/include",
  "../../common/include",
  "./",
]

sources_entry = [
  "../../common/osTest.cpp",
  "process_process_test.cpp",
]

source_set("sources_smoke") {
  sources = [
    "smoke/process_test_001.cpp",
    "smoke/process_test_002.cpp",
    "smoke/process_test_004.cpp",
    "smoke/process_test_005.cpp",
    "smoke/process_test_006.cpp",
    "smoke/process_test_007.cpp",
    "smoke/process_test_008.cpp",
    "smoke/process_test_009.cpp",
    "smoke/process_test_010.cpp",
    "smoke/process_test_011.cpp",
    "smoke/process_test_012.cpp",
    "smoke/process_test_013.cpp",
    "smoke/process_test_014.cpp",
    "smoke/process_test_015.cpp",
    "smoke/process_test_016.cpp",
    "smoke/process_test_017.cpp",
    "smoke/process_test_018.cpp",
    "smoke/process_test_019.cpp",
    "smoke/process_test_020.cpp",
    "smoke/process_test_021.cpp",
    "smoke/process_test_022.cpp",
    "smoke/process_test_023.cpp",
    "smoke/process_test_024.cpp",
    "smoke/process_test_025.cpp",
    "smoke/process_test_026.cpp",
    "smoke/process_test_027.cpp",
    "smoke/process_test_029.cpp",
    "smoke/process_test_030.cpp",
    "smoke/process_test_031.cpp",
    "smoke/process_test_032.cpp",
    "smoke/process_test_033.cpp",
    "smoke/process_test_034.cpp",
    "smoke/process_test_035.cpp",
    "smoke/process_test_036.cpp",
    "smoke/process_test_037.cpp",
    "smoke/process_test_038.cpp",
    "smoke/process_test_039.cpp",
    "smoke/process_test_040.cpp",
    "smoke/process_test_041.cpp",
    "smoke/process_test_042.cpp",
    "smoke/process_test_043.cpp",
    "smoke/process_test_044.cpp",
    "smoke/process_test_045.cpp",
    "smoke/process_test_046.cpp",
    "smoke/process_test_047.cpp",
    "smoke/process_test_048.cpp",
    "smoke/process_test_049.cpp",
    "smoke/process_test_050.cpp",
    "smoke/process_test_051.cpp",
    "smoke/process_test_053.cpp",
    "smoke/process_test_054.cpp",
    "smoke/process_test_055.cpp",
    "smoke/process_test_056.cpp",
    "smoke/process_test_057.cpp",
    "smoke/process_test_058.cpp",
    "smoke/process_test_059.cpp",
    "smoke/process_test_060.cpp",
    "smoke/process_test_061.cpp",
    "smoke/process_test_062.cpp",
    "smoke/process_test_063.cpp",
    "smoke/process_test_064.cpp",
    "smoke/process_test_065.cpp",
    "smoke/process_test_066.cpp",
    "smoke/process_test_067.cpp",
    "smoke/process_test_068.cpp",
    "smoke/process_test_069.cpp",
    "smp/process_test_smp_001.cpp",
    "smp/process_test_smp_002.cpp",
    "smp/process_test_smp_003.cpp",
    "smp/process_test_smp_004.cpp",
    "smp/process_test_smp_005.cpp",
    "smp/process_test_smp_006.cpp",
    "smp/process_test_smp_007.cpp",
    "smp/process_test_smp_008.cpp",
  ]
  include_dirs = common_include_dirs
  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
}

source_set("sources_other") {
  sources = [
  ]
  include_dirs = common_include_dirs
  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
}

if (LOSCFG_USER_TEST_FOR_ALL == true) {
  unittest("liteos_a_process_unittest") {
    output_extension = "bin"
    output_dir = "$root_out_dir/test/unittest/kernel"
    include_dirs = common_include_dirs
    sources = sources_entry
    configs = [ "../..:public_config_full" ]
    deps = []
    deps += [ ":sources_smoke" ]
    deps += [ ":sources_other" ]
  }
}

if (LOSCFG_USER_TEST_FOR_DOOR == true) {
  unittest("liteos_a_process_unittest_door") {
    output_extension = "bin"
    output_dir = "$root_out_dir/test/unittest/kernel"
    include_dirs = common_include_dirs
    sources = sources_entry
    configs = [ "../..:public_config_smk" ]
    deps = []
    deps += [ ":sources_smoke" ]
  }
}